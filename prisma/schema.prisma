generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  telegramId         String      @id @unique
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  lang               String      @default("ru")
  name               String
  town               String
  sex                Sex
  selSex             Sex
  age                Int
  bio                String
  enableGeo          Boolean     @default(false)
  isVerify           Boolean     @default(false)
  latitude           Float?
  longitude          Float?
  interestId         Int?
  role               Role        @default(User)
  status             Status      @default(Noob)
  referralCode       String?     @unique
  invitedById        String?
  sentComplaints     Complaint[] @relation("SentComplaints")
  receivedComplaints Complaint[] @relation("ReceivedComplaints")
  likesSent          Like[]      @relation("LikesSent")
  likesReceived      Like[]      @relation("LikesReceived")
  photos             Photo[]
  interest           Interest?   @relation(fields: [interestId], references: [id])
  invitedBy          User?       @relation("UserInvites", fields: [invitedById], references: [telegramId])
  invitedUsers       User[]      @relation("UserInvites")
  userPlans          UserPlan[]
}

model Psychologist {
  id         Int                 @id @default(autoincrement())
  telegramId String              @unique
  name       String
  about      String
  status     PsychologistStatus  @default(Active)
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")
  photos     PsychologistPhoto[]
}

model PsychologistPhoto {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  key          String
  tempTgId     String?
  telegramId   String?
  psychologist Psychologist? @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
}

model UserPlan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId             String @unique
  planId             Int
  planDescription    String
  regionId           Int
  regionnDescription String

  user   User    @relation(fields: [userId], references: [telegramId])
  plan   Plans   @relation(fields: [planId], references: [id])
  region Regions @relation(fields: [regionId], references: [id])
}

model Interest {
  id      Int     @id @default(autoincrement())
  value   String  @unique
  label   String
  isOppos Boolean @default(false)
  users   User[]
}

model Plans {
  id    Int        @id @default(autoincrement())
  value String     @unique
  label String
  users UserPlan[]
}

model Cityes {
  id      String    @unique
  value   String    @unique
  label   String    @unique
  regions Regions[]
}

model Regions {
  id     Int        @id @default(autoincrement())
  cityId String
  value  String
  label  String
  city   Cityes     @relation(fields: [cityId], references: [id])
  users  UserPlan[]

  @@unique([cityId, value])
}

model Photo {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  key        String
  tempTgId   String?
  telegramId String?
  user       User?    @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
}

model ComplaintGlobVars {
  id    Int    @id @default(autoincrement())
  value String @unique
  label String

  descs ComplaintDescVars[] @relation("GlobToDesc")
}

model ComplaintDescVars {
  id      Int    @id @default(autoincrement())
  globId  Int
  globVal String
  value   String @unique
  label   String

  glob ComplaintGlobVars @relation("GlobToDesc", fields: [globId], references: [id])
}

model ComplaintReason {
  id         Int         @id
  value      String      @unique
  label      String
  complaints Complaint[]
}

model Complaint {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now()) @map("created_at")
  reasonId   Int
  fromUserId String
  toUserId   String
  status     ComplaintStatus @default(UNDER_REVIEW)
  fromUser   User            @relation("SentComplaints", fields: [fromUserId], references: [telegramId], onDelete: Cascade)
  reason     ComplaintReason @relation(fields: [reasonId], references: [id])
  toUser     User            @relation("ReceivedComplaints", fields: [toUserId], references: [telegramId], onDelete: Cascade)
}

model Like {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  fromUserId String
  toUserId   String
  isMatch    Boolean  @default(false)
  isRead     Boolean  @default(false)
  fromUser   User     @relation("LikesSent", fields: [fromUserId], references: [telegramId], onDelete: Cascade)
  toUser     User     @relation("LikesReceived", fields: [toUserId], references: [telegramId], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
}

enum Sex {
  Male
  Female
  All
  None
}

enum Role {
  Admin
  User
  Psych
}

enum Status {
  Pro
  Noob
  Blocked
}

enum ComplaintStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  REJECTED
}

enum PsychologistStatus {
  Active
  Inactive
  Blocked
}
