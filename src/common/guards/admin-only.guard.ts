import {
	CanActivate,
	ExecutionContext,
	ForbiddenException,
	Injectable,
} from '@nestjs/common'
import { Reflector } from '@nestjs/core'
import { Request } from 'express'
import { PrismaService } from '../../../prisma/prisma.service'
import { ADMIN_ONLY_KEY } from '../decorators/admin-only.decorator'

@Injectable()
export class AdminOnlyGuard implements CanActivate {
	constructor(
		private readonly prisma: PrismaService,
		private readonly reflector: Reflector
	) {}

	async canActivate(context: ExecutionContext): Promise<boolean> {
		const isAdminOnly = this.reflector.getAllAndOverride<boolean>(
			ADMIN_ONLY_KEY,
			[context.getHandler(), context.getClass()]
		)
		if (!isAdminOnly) return true

		const request = context.switchToHttp().getRequest<Request>()
		// –ò—â–µ–º telegramId –∞–¥–º–∏–Ω–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
		const adminTelegramId =
			request.headers['x-spectre-telegram-id'] ||
			request.headers['x-admin-telegram-id'] ||
			request.query?.adminTelegramId ||
			request.body?.adminTelegramId

		console.log('üîç AdminOnlyGuard: –ü–æ–ª—É—á–µ–Ω adminTelegramId:', adminTelegramId)
		console.log('üîç AdminOnlyGuard: –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', request.headers)

		if (!adminTelegramId || adminTelegramId === 'error')
			throw new ForbiddenException('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')

		const user = await this.prisma.user.findUnique({
			where: { telegramId: adminTelegramId },
			select: { role: true },
		})

		console.log('üîç AdminOnlyGuard: –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user)

		if (user?.role !== 'Admin') {
			console.log(
				'üîç AdminOnlyGuard: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º, —Ä–æ–ª—å:',
				user?.role
			)
			throw new ForbiddenException('–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
		}

		console.log('üîç AdminOnlyGuard: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')

		return true
	}
}
