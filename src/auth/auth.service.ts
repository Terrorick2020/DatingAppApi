import { Injectable } from '@nestjs/common'
import { v4 as uuidv4 } from 'uuid'
import { PrismaService } from '../../prisma/prisma.service'
import {
	errorResponse,
	successResponse,
} from '../common/helpers/api.response.helper'
import { AppLogger } from '../common/logger/logger.service'
import { GeoService } from '../geo/geo.service'
import { RedisService } from '../redis/redis.service'
import { StorageService } from '../storage/storage.service'
import { UserService } from '../user/user.service'
import { CheckAuthDto } from './dto/check-auth.dto'
import { CreateAuthDto } from './dto/create-auth.dto'
import { DeletePhotoDto } from './dto/delete-photo.dto'
import { LoginDto } from './dto/login.dto'
import { UploadPhotoInternalDto } from './dto/upload-photo-internal.dto'
import {
	PhotoResponse,
	UserProfileResponse,
} from './interfaces/auth-response.interface'

@Injectable()
export class AuthService {
	private readonly CONTEXT = 'AuthService'

	constructor(
		private prisma: PrismaService,
		private userService: UserService,
		private logger: AppLogger,
		private redisService: RedisService,
		private storageService: StorageService,
		private geoService: GeoService
	) {}

	async check(checkAuthDto: CheckAuthDto) {
		const telegramId = checkAuthDto.telegramId
		try {
			this.logger.debug(
				`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId: ${telegramId}`,
				this.CONTEXT
			)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ Redis
			// const cacheKey = `user:${telegramId}:status`
			// const cachedStatus = await this.redisService.getKey(cacheKey)

			// if (cachedStatus.success && cachedStatus.data) {
			// 	this.logger.debug(
			// 		`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${cachedStatus.data}`,
			// 		this.CONTEXT
			// 	)

			// 	return successResponse(
			// 		cachedStatus.data,
			// 		cachedStatus.data === 'None'
			// 			? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
			// 			: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω'
			// 	)
			// }

			// –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ, –∏—â–µ–º –≤ –ë–î
			const status = await this.userService.checkTgID(telegramId)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Redis
			if (typeof status === 'string') {
				// –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
				// const cacheTTL = 300 // 5 –º–∏–Ω—É—Ç
				// await this.redisService.setKey(cacheKey, status, cacheTTL)

				if (status === 'None') {
					this.logger.debug(
						`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`,
						this.CONTEXT
					)
					return successResponse(status, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
				}

				this.logger.debug(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–∞–π–¥–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${status}`,
					this.CONTEXT
				)

				return successResponse(status, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω')
			} else if (typeof status === 'object' && 'success' in status) {
				// –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è –æ–±—ä–µ–∫—Ç ApiResponse, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
				return status
			} else {
				// –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
				return errorResponse('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
			}
		} catch (error: any) {
			this.logger.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
				error?.stack,
				this.CONTEXT,
				{ error }
			)
			return errorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
		}
	}

	async uploadPhoto(dto: UploadPhotoInternalDto) {
		try {
			this.logger.debug(
				`–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
				this.CONTEXT,
				{ photoKey: dto.key }
			)

			// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
			const photoCount = await this.prisma.photo.count({
				where: {
					OR: [{ telegramId: dto.telegramId }, { tempTgId: dto.telegramId }],
				},
			})

			if (photoCount >= 3) {
				this.logger.warn(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dto.telegramId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ`,
					this.CONTEXT
				)
				return errorResponse('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
			const photo = await this.prisma.photo.create({
				data: {
					key: dto.key,
					tempTgId: dto.telegramId,
				},
			})

			this.logger.debug(
				`–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${photo.id}`,
				this.CONTEXT
			)

			return successResponse({ photoId: photo.id }, '–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
		} catch (error: any) {
			this.logger.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
				error?.stack,
				this.CONTEXT,
				{ dto, error }
			)
			return errorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error)
		}
	}

	async register(dto: CreateAuthDto) {
		try {
			this.logger.debug(
				`–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${dto.telegramId}`,
				this.CONTEXT
			)

			return await this.prisma.$transaction(async tx => {
				const {
					telegramId,
					photoIds,
					invitedByReferralCode,
					interestId,
					latitude,
					longitude,
					enableGeo,
					town, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
					...userData
				} = dto

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const existingUser = await tx.user.findUnique({
					where: { telegramId },
				})

				if (existingUser) {
					this.logger.warn(
						`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
						this.CONTEXT
					)
					return errorResponse('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
				const photos = await tx.photo.findMany({
					where: { id: { in: photoIds } },
				})

				if (photos.length !== photoIds.length) {
					const foundIds = photos.map(p => p.id)
					const missingIds = photoIds.filter(id => !foundIds.includes(id))
					this.logger.warn(
						`–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${missingIds.join(', ')}`,
						this.CONTEXT
					)
					return errorResponse('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
				const interest = await tx.interest.findUnique({
					where: { id: interestId },
				})

				if (!interest) {
					this.logger.warn(
						`–£–∫–∞–∑–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–µ—Å: ${interestId}`,
						this.CONTEXT
					)
					return errorResponse('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
				}

				// ‚≠ê –û–ë–†–ê–ë–û–¢–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò
				let finalTown = town
				let finalLatitude = latitude
				let finalLongitude = longitude

				if (enableGeo && latitude && longitude) {
					this.logger.debug(
						`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${latitude}, ${longitude}`,
						this.CONTEXT
					)

					try {
						// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
						const geoResult = await this.geoService.getCityByCoordinates({
							latitude,
							longitude,
							enableGeo: true,
						})

						if (geoResult.success && geoResult.data?.city) {
							finalTown = geoResult.data.city
							this.logger.debug(
								`–ì–æ—Ä–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ${finalTown}`,
								this.CONTEXT
							)
						} else {
							this.logger.warn(
								`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π: ${town}`,
								this.CONTEXT
							)
						}
					} catch (geoError: any) {
						this.logger.error(
							`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º`,
							geoError?.stack,
							this.CONTEXT,
							{ latitude, longitude, error: geoError }
						)
						// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º
					}
				}

				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
				let invitedById: string | undefined = undefined
				this.logger.debug(
					`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${invitedByReferralCode || '–ù–ï –ü–ï–†–ï–î–ê–ù'}`,
					this.CONTEXT
				)
				if (invitedByReferralCode) {
					this.logger.debug(
						`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞: ${invitedByReferralCode}`,
						this.CONTEXT
					)

					const inviter = await tx.user.findUnique({
						where: { referralCode: invitedByReferralCode },
					})

					if (inviter) {
						invitedById = inviter.telegramId
						this.logger.debug(
							`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ –∫–æ–¥—É –æ—Ç: ${invitedById}`,
							this.CONTEXT
						)
					} else {
						this.logger.warn(
							`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${invitedByReferralCode}`,
							this.CONTEXT
						)
					}
				} else {
					this.logger.debug(
						`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`,
						this.CONTEXT
					)
				}

				// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
				const referralCode = uuidv4().slice(0, 8)

				// ‚≠ê –°–û–ó–î–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –° –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò
				const createdUser = await tx.user.create({
					data: {
						...userData,
						telegramId,
						town: finalTown, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥
						enableGeo,
						latitude: enableGeo ? finalLatitude : null,
						longitude: enableGeo ? finalLongitude : null,
						referralCode,
						interest: { connect: { id: interestId } },
						photos: {
							connect: photoIds.map(id => ({ id })),
						},
						...(invitedById !== undefined
							? { invitedBy: { connect: { telegramId: invitedById } } }
							: {}),
					},
				})

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
				await tx.photo.updateMany({
					where: {
						tempTgId: telegramId,
						telegramId: null,
					},
					data: {
						telegramId,
						tempTgId: null,
					},
				})

				this.logger.debug(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π: ${enableGeo}`,
					this.CONTEXT,
					{
						town: finalTown,
						hasCoordinates: !!(finalLatitude && finalLongitude),
						coordinates: enableGeo
							? { lat: finalLatitude, lng: finalLongitude }
							: null,
					}
				)

				return successResponse(
					{
						user: {
							telegramId: createdUser.telegramId,
							town: finalTown,
							enableGeo,
							coordinates: enableGeo
								? { latitude: finalLatitude, longitude: finalLongitude }
								: null,
							referralCode,
						},
					},
					'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Ñ–æ—Ç–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã'
				)
			})
		} catch (error: any) {
			this.logger.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${dto.telegramId}`,
				error?.stack,
				this.CONTEXT,
				{ dto, error }
			)
			return errorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error)
		}
	}

	async login(loginDto: LoginDto) {
		const { telegramId } = loginDto

		try {
			this.logger.debug(`–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramId}`, this.CONTEXT)

			// // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			// const cacheKey = `user:${telegramId}:profile`
			// const cachedProfile = await this.redisService.getKey(cacheKey)

			// if (cachedProfile.success && cachedProfile.data) {
			// 	try {
			// 		const profile = JSON.parse(cachedProfile.data)
			// 		this.logger.debug(
			// 			`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞`,
			// 			this.CONTEXT
			// 		)
			// 		return successResponse(
			// 			profile,
			// 			'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞'
			// 		)
			// 	} catch (e) {
			// 		this.logger.warn(
			// 			`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${telegramId}`,
			// 			this.CONTEXT,
			// 			{ error: e }
			// 		)
			// 	}
			// }

			// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
			const user = await this.prisma.user.findUnique({
				where: {
					telegramId,
					status: { not: 'Blocked' },
				},
				include: {
					photos: {
						select: {
							id: true,
							key: true,
						},
						orderBy: { createdAt: 'asc' },
					},
					interest: {
						select: {
							id: true,
							value: true,
							label: true,
							isOppos: true,
						},
					},
					invitedBy: {
						select: {
							telegramId: true,
							name: true,
						},
					},
					invitedUsers: {
						select: {
							telegramId: true,
							name: true,
						},
						take: 10,
					},
				},
			})

			if (!user) {
				this.logger.warn(
					`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`,
					this.CONTEXT
				)
				return errorResponse('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
			}

			// ‚≠ê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URLs –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å ID
			const photoPromises = user.photos.map(async photo => {
				try {
					const presignedUrl = await this.storageService.getPresignedUrl(
						photo.key,
						7200
					) // 2 —á–∞—Å–∞
					return {
						id: photo.id,
						url: presignedUrl,
					}
				} catch (error) {
					this.logger.warn(
						`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è presigned URL –¥–ª—è —Ñ–æ—Ç–æ ID ${photo.id}, key: ${photo.key}`,
						this.CONTEXT,
						{ error, photoId: photo.id, photoKey: photo.key }
					)
					return null
				}
			})

			const photoResults = await Promise.all(photoPromises)
			const validPhotos = photoResults.filter(
				photo => photo !== null
			) as PhotoResponse[]

			// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
			const userProfile: UserProfileResponse = {
				telegramId: user.telegramId,
				name: user.name,
				town: user.town,
				sex: user.sex,
				selSex: user.selSex,
				age: user.age,
				bio: user.bio,
				lang: user.lang,
				enableGeo: user.enableGeo,
				isVerify: user.isVerify,
				latitude: user.latitude || undefined,
				longitude: user.longitude || undefined,
				role: user.role,
				status: user.status,
				referralCode: user.referralCode || undefined,
				createdAt: user.createdAt.toISOString(),
				updatedAt: user.updatedAt.toISOString(),
				photos: validPhotos,
				interest: user.interest,
				invitedBy: user.invitedBy || undefined,
				invitedUsers: user.invitedUsers,
			}

			// –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ 10 –º–∏–Ω—É—Ç
			// const cacheTTL = 600
			// await this.redisService.setKey(
			// 	cacheKey,
			// 	JSON.stringify(userProfile),
			// 	cacheTTL
			// )

			// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			await this.redisService.setKey(
				`user:${telegramId}:status`,
				user.status,
				300
			)

			this.logger.debug(
				`–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`,
				this.CONTEXT,
				{
					photosCount: validPhotos.length,
					totalPhotosInDb: user.photos.length,
					failedPhotos: user.photos.length - validPhotos.length,
				}
			)

			return successResponse(userProfile, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞')
		} catch (error: any) {
			this.logger.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`,
				error?.stack,
				this.CONTEXT,
				{ error }
			)
			return errorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error)
		}
	}

	async deletePhoto(dto: DeletePhotoDto) {
		try {
			this.logger.debug(
				`–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ ${dto.photoId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
				this.CONTEXT
			)

			return await this.prisma.$transaction(async tx => {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const user = await tx.user.findUnique({
					where: { telegramId: dto.telegramId },
					include: { photos: true },
				})

				if (!user) {
					this.logger.warn(
						`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dto.telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ`,
						this.CONTEXT
					)
					return errorResponse('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				const photo = await tx.photo.findFirst({
					where: {
						id: dto.photoId,
						telegramId: dto.telegramId,
					},
				})

				if (!photo) {
					this.logger.warn(
						`–§–æ—Ç–æ ${dto.photoId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dto.telegramId}`,
						this.CONTEXT
					)
					return errorResponse('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º')
				}

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
				if (user.photos.length <= 1) {
					this.logger.warn(
						`–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
						this.CONTEXT
					)
					return errorResponse(
						'–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –£ –≤–∞—Å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
					)
				}

				// –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
				await tx.photo.delete({
					where: { id: dto.photoId },
				})

				// –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ S3
				try {
					await this.storageService.deletePhoto(photo.key)
					this.logger.debug(
						`–§–æ—Ç–æ ${photo.key} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`,
						this.CONTEXT
					)
				} catch (storageError: any) {
					this.logger.error(
						`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${photo.key}`,
						storageError?.stack,
						this.CONTEXT,
						{ error: storageError }
					)
					// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–æ—Ç–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ë–î
				}

				// –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				await this.invalidateUserCache(dto.telegramId)

				this.logger.debug(
					`–§–æ—Ç–æ ${dto.photoId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
					this.CONTEXT
				)

				return successResponse('–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞')
			})
		} catch (error: any) {
			this.logger.error(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ ${dto.photoId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${dto.telegramId}`,
				error?.stack,
				this.CONTEXT,
				{ dto, error }
			)
			return errorResponse('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', error)
		}
	}

	private async invalidateUserCache(telegramId: string): Promise<void> {
		try {
			const cacheKeys = [
				`user:${telegramId}:status`,
				`user:${telegramId}:profile`,
				`user:${telegramId}:chats_preview`,
			]

			for (const key of cacheKeys) {
				await this.redisService.deleteKey(key)
			}

			this.logger.debug(
				`–ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω`,
				this.CONTEXT
			)
		} catch (error) {
			this.logger.warn(
				`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
				this.CONTEXT,
				{ telegramId, error }
			)
		}
	}
}
